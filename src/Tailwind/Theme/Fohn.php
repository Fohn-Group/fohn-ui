<?php

declare(strict_types=1);

/**
 * Material like theme.
 * Default Tailwind css is generated base on these properties values.
 * Also, utilities generated by Tw classes should verify these properties values
 * in order to make sure default tailwinds css include them.
 */

namespace Fohn\Ui\Tailwind\Theme;

use Fohn\Ui\Tailwind\Tw;
use Fohn\Ui\View;
use Fohn\Ui\View\Button;
use Fohn\Ui\View\Message;
use Fohn\Ui\View\Tag;

class Fohn extends Base
{
    protected array $colorRecipes = [];

    public array $safeLists = [
        'ml' => [
            'value' => ['52', '56', '60', '64'],
            'variant' => TwConstant::SCREEN_VARIANTS,
        ],
        'list' => [
            'value' => ['none', 'disc', 'decimal', '[upper-roman]'],
            'variant' => TwConstant::SCREEN_VARIANTS,
        ],
    ];

    /** Utility shared among components. */
    protected array $sharedUtilities = [
        'btn' => [
            'rounded-md',
            'focus:outline-none',
            'focus:ring',
            'focus:ring-offset-2',
            'focus:ring-opacity-50',
        ],
        'message' => [
            'p-4',
            'rounded',
        ],
        'tag' => [
            'mx-2',
            'my-1',
            'px-2',
            'py-1',
            'rounded',
            'text-center',
        ],
    ];

    /** Callables needed for creating proper Tailwinds for components. */
    protected array $componentMethods = [
        Base::PAGE => [__CLASS__, 'pageFactory'],
        Base::BUTTON => [__CLASS__, 'btnFactory'],
        Base::MESSAGE => [__CLASS__, 'messageFactory'],
        Base::TAG => [__CLASS__, 'labelFactory'],
        Base::CONSOLE => [__CLASS__, 'consoleFactory'],
        Base::CHIP => [__CLASS__, 'chipFactory'],
        Base::LINK => [__CLASS__, 'linkFactory'],
    ];

    public function init(): void
    {
        $this->colorRecipes = [
            'primary' => ['bg-' . $this->colors['primary'], 'text-' . $this->colors['white']],
            'secondary' => ['bg-' . $this->colors['secondary'], 'text-' . $this->colors['white']],
            'accent' => ['bg-' . $this->colors['accent'], 'text-' . $this->colors['white']],
            'info' => ['bg-' . $this->colors['info'], 'text-' . $this->colors['white']],
            'success' => ['bg-' . $this->colors['success'], 'text-' . $this->colors['white']],
            'error' => ['bg-' . $this->colors['error'], 'text-' . $this->colors['white']],
            'warning' => ['bg-' . $this->colors['warning'], 'text-' . $this->colors['white']],
            'neutral' => ['bg-' . $this->colors['neutral'], 'text-' . $this->colors['black']],
        ];

        $this->supportedVariants = array_merge($this->screens, $this->states);
    }

    public static function colorAs(string $color, View $view, string $type = 'contained'): void
    {
        static::getInstance()->twColorFactory($color, $view, $type);
    }

    public static function styleAs(string $component, array $args = []): void
    {
        static::getInstance()->twFactory($component, $args);
    }

    protected function twFactory(string $component, array $args): void
    {
        call_user_func($this->componentMethods[$component], ...$args);
    }

    // -------------
    // APP
    // -------------

    protected function pageFactory(View $html): void
    {
        $html->appendTailwinds(['text-' . $this->colors['black']]);
    }

    // -------------
    // LINK
    // -------------

    protected function linkFactory(View\Link $link): void
    {
        $link->appendTailwinds(['underline', 'text-' . $this->colors[$link->color], 'decoration-' . $this->colors[$link->decorationColor]]);
    }

    // -------------
    // COLOR
    // -------------

    protected function twColorFactory(string $color, View $view, string $type): void
    {
        $tws = Tw::from([]);

        switch ($type) {
            case 'contained':
                $tws = $tws->merge($this->colorRecipes[$color]);

                break;
            case 'outline':
                $textColor = $color === 'neutral' ? $this->colors['black'] : $this->colors[$color];
                $tws->merge(
                    [
                        'text-' . $textColor,
                        'border-' . $this->colors[$color],
                        'border',
                    ]
                );

                break;
        }
        $view->appendTailwinds($tws->get());
    }

    // -------------
    // BUTTON
    // -------------

    protected function btnFactory(Button $btn): void
    {
        switch ($btn->getType()) {
            case 'contained':
                $this->btnContained($btn);

                break;
            case 'outline':
                $this->btnOutline($btn);

                break;
            case 'text':
                $this->btnText($btn);

                break;
            case 'link':
                $this->btnLink($btn);

                break;
            default:
        }
    }

    protected function btnShape(Button $btn): array
    {
        $sizes = [
            'tiny' => ['px-2', 'text-xs', 'leading-relaxed', 'h-6', 'min-h-6'],
            'small' => ['px-3', 'leading-8', 'h-8', 'text-sm', 'min-h-8'],
            'normal' => ['px-4', 'leading-loose', 'h-12', 'text-base', 'min-h-12'],
            'large' => ['px-6', 'text-lg', 'leading-relaxed', 'h-16', 'min-h-16'],
        ];

        $shapes = [
            'normal' => ['w-32'],
            'wide' => ['w-64'],
            'block' => ['w-full'],
            'square' => [
                'tiny' => ['h-6', 'w-6', 'p-0'],
                'small' => ['h-8', 'w-8', 'p-0'],
                'normal' => ['h-12', 'w-12', 'p-0'],
                'large' => ['h-16', 'w-16', 'p-0'],
            ],
            'circle' => ['rounded-full'],
        ];

        if ($btn->getShape() === 'wide' || $btn->getShape() === 'block' || $btn->getShape() === 'normal') {
            $tws = Tw::from($sizes[$btn->getSize()])->merge($shapes[$btn->getShape()])();
        } elseif ($btn->getShape() === 'square' && ($btn->getIcon() && !$btn->getTextContent())) {
            $tws = $shapes['square'][$btn->getSize()];
        } elseif ($btn->getShape() === 'circle' && ($btn->getIcon() && !$btn->getTextContent())) {
            $tws = Tw::from($shapes['square'][$btn->getSize()])->merge($shapes['circle'])();
        } else {
            $tws = Tw::from($sizes[$btn->getSize()])->merge($btn->getShape() === 'circle' ? $shapes['circle'] : [])();
        }

        return $tws;
    }

    protected function btnContained(Button $btn): void
    {
        $btn->appendTailwinds(
            Tw::from($this->sharedUtilities['btn'])
                ->merge($this->colorRecipes[$btn->getColor()])
                ->merge([
                    'hover:bg-' . $this->colors[$btn->getColor() . '-light'],
                    'active:bg-' . $this->colors[$btn->getColor() . '-dark'],
                    'focus:ring-' . $this->colors[$btn->getColor()],
                    'shadow',
                    'border',
                    'disabled:bg-gray-200',
                    'disabled:text-gray-400',
                    'disabled:cursor-default',
                ])
                ->merge($this->btnShape($btn))
                ->get()
        );
    }

    protected function btnOutline(Button $btn): void
    {
        $textColor = $btn->getColor() === 'neutral' ? $this->colors['black'] : $this->colors[$btn->getColor()];
        $btn->appendTailwinds(
            Tw::from($this->sharedUtilities['btn'])
                ->merge([
                    'hover:bg-' . $this->colors[$btn->getColor() . '-light'],
                    'active:bg-' . $this->colors[$btn->getColor() . '-dark'],
                    'text-' . $textColor,
                    'hover:text-' . $this->colors['white'],
                    'border-' . $this->colors[$btn->getColor()],
                    'focus:ring-' . $this->colors[$btn->getColor()],
                    'border',
                    'disabled:bg-transparent',
                    'disabled:border-gray-300',
                    'disabled:text-gray-400',
                    'disabled:cursor-default',
                ])
                ->merge($this->btnShape($btn))
                ->get()
        );
    }

    protected function btnText(Button $btn): void
    {
        $textColor = $btn->getColor() === 'neutral' ? $this->colors['black'] : $this->colors[$btn->getColor()];
        $btn->appendTailwinds(
            Tw::from($this->sharedUtilities['btn'])
                ->merge([
                    'hover:bg-gray-200',
                    'active:bg-' . $this->colors[$btn->getColor() . '-dark'],
                    'text-' . $textColor,
                    'active:text-' . $this->colors['white'],
                    'focus:ring-' . $this->colors[$btn->getColor()],
                ])
                ->merge($this->btnShape($btn))
                ->get()
        );
    }

    protected function btnLink(Button $btn): void
    {
        $btn->appendTailwinds([
            'text-' . $this->colors['primary'],
            'underline',
            'cursor-pointer',
            'disabled:text-gray-400',
            'disabled:cursor-default',
        ]);
    }

    // -------------
    // MESSAGE
    // -------------

    protected function messageFactory(Message $msg): void
    {
        switch ($msg->type) {
            case 'contained':
                $this->msgContained($msg);

                break;
            case 'outline':
                $this->msgOutline($msg);

                break;
            default:
        }
    }

    protected function msgContained(Message $msg): void
    {
        $tws = Tw::from($this->sharedUtilities['message'])->merge($this->colorRecipes[$msg->color]);
        $msg->appendTailwinds($tws->get());

        $this->setMessageText($msg);
    }

    protected function msgOutline(Message $msg): void
    {
        $tws = Tw::from($this->sharedUtilities['message'])->merge(['border', 'border-' . $this->colors[$msg->color]]);
        $msg->appendTailwinds($tws->get());

        $this->setMessageText($msg);
    }

    protected function setMessageText(Message $msg): void
    {
        $textColor = [];
        if ($msg->type === 'outline') {
            $textColor[] = 'text-' . $this->colors[$msg->color === 'neutral' ? 'black' : $msg->color];
        }

        $msg->getTitleView()->appendTailwinds(
            Tw::from(['font-medium'])
                ->merge($textColor)
                ->get()
        );

        if ($text = $msg->getMsgContainer()) {
            $text->appendTailwinds(
                Tw::from([
                    'italic',
                    'text-sm',
                    'my-1',
                    'mx-2',
                ])
                    ->merge($textColor)
                    ->get()
            );
        }
    }

    // -------------
    // TAG
    // -------------

    protected function labelFactory(Tag $tag): void
    {
        $tws = Tw::from($this->sharedUtilities['tag']);
        $tws->merge(['w-' . $tag->width]);

        switch ($tag->type) {
            case 'contained':
                $tws->merge($this->getTagContained($tag->color));

                break;
            case 'outline':
                $tws->merge($this->getTagOutline($tag->color));

                break;
            default:
        }

        $tws->merge($this->getTagShape($tag->shape));
        $tws->merge($this->getTagTextSize($tag->textSize));

        $tag->appendTailwinds($tws->get());
    }

    protected function getTagContained(string $color): array
    {
        return $this->colorRecipes[$color];
    }

    protected function getTagOutline(string $color): array
    {
        return ['border', Tw::borderColor($color), Tw::textColor($color === 'neutral' ? 'black' : $color)];
    }

    protected function getTagTextSize(string $size): array
    {
        $sizeMap = [
            'x-small' => ['text-xs'],
            'small' => ['text-sm'],
            'regular' => [],
            'big' => ['text-2xl'],
        ];

        return $sizeMap[$size] ?? [];
    }

    protected function getTagShape(string $shape): array
    {
        return $shape === 'rounded' ? ['rounded-full'] : [];
    }

    // -------------
    // CONSOLE
    // -------------

    protected function consoleFactory(View $view, string $color = 'warning-light'): void
    {
        $view->appendTailwinds([
            'bg-gray-800',
            Tw::textColor($color),
            'my-4',
            'text-sm',
            'p-2',
            'overflow-auto',
            'rounded-md',
        ]);
    }

    // -------------
    // CHIP
    // -------------

    protected function chipFactory(View\Chip $chip): void
    {
        $tws = Tw::from([
            'flex',
            'items-center',
            'rounded-full',
            'w-' . $chip->size,
            'h-' . $chip->size,
            'my-auto',
        ]);
        $chip->appendTailwinds($tws->get());
        $this->twColorFactory($chip->color, $chip, $chip->type);
    }
}
